#!/usr/bin/env node
import { mkdirpSync, readFileSync, writeFileSync } from "fs-extra"
import md5 from "md5"
import { resolve } from "path"
import { configToJson } from "../../../configuration/helpers/configuration-to-json"
import { Configuration } from "../../../model/configuration"

const CACHE_PATH = resolve(__dirname, "../../../", ".funk/.cache/api-prebuild")
const CONFIG_JSON_CACHE_PATH = `${CACHE_PATH}/configJson`

export default function (configuration: Configuration) {
  const configJson = configToJson(configuration)
  const hashedConfigJson = md5(JSON.stringify(configJson))
  let cachedHashedConfigJson: string | undefined
  try {
    cachedHashedConfigJson = readFileSync(CONFIG_JSON_CACHE_PATH, "utf8")
  } catch {}

  if (cachedHashedConfigJson !== hashedConfigJson) {
    writeConfig()
    cacheConfig()
  }

  function writeConfig(): void {
    const integrationTestConfigPath = resolve(
      __dirname,
      "../../../configuration/integration-test.ts",
    )
    const developmentConfigPath = resolve(
      __dirname,
      "../../../configuration/development.ts",
    )
    const localConfigPath = resolve(
      __dirname,
      "../../../configuration/local.ts",
    )
    const configPathForEnv = resolve(
      __dirname,
      `../../../configuration/${configuration}.ts`,
    )
    const configOutputDirPath = resolve(
      __dirname,
      "../../../.funk/build-pipeline-output/configuration",
    )
    const integrationTestConfigFile =
      '// DO NOT EDIT. This file was generated by the "prebuild" script.\n' +
      readFileSync(integrationTestConfigPath, { encoding: "utf-8" })
    const developmentConfigFile =
      '// DO NOT EDIT. This file was generated by the "prebuild" script.\n' +
      readFileSync(developmentConfigPath, { encoding: "utf-8" })
    const localConfigFile =
      '// DO NOT EDIT. This file was generated by the "prebuild" script.\n' +
      readFileSync(localConfigPath, { encoding: "utf-8" })
    const configFile =
      '// DO NOT EDIT. This file was generated by the "prebuild" ' +
      "script.\n\n" +
      readFileSync(configPathForEnv, { encoding: "utf-8" })

    mkdirpSync(configOutputDirPath)
    writeFileSync(
      resolve(configOutputDirPath, "integration-test.ts"),
      integrationTestConfigFile,
    )
    writeFileSync(
      resolve(configOutputDirPath, "local.ts"),
      localConfigFile,
    )
    writeFileSync(
      resolve(configOutputDirPath, "test-configuration.ts"),
      developmentConfigFile,
    )
    writeFileSync(
      resolve(configOutputDirPath, "development.ts"),
      developmentConfigFile,
    )
    writeFileSync(resolve(configOutputDirPath, "configuration.ts"), configFile)
  }
  function cacheConfig() {
    mkdirpSync(CACHE_PATH)
    writeFileSync(CONFIG_JSON_CACHE_PATH, hashedConfigJson)
  }
}
